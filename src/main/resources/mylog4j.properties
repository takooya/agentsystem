### 设置 ###
#1.配置根Logger
#Logger 负责处理日志记录的大部分操作。其语法为：
#log4j.rootLogger = [ level ] , appenderName, appenderName, …
#
#其中，level 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者自定义的级别。
#Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。
#通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。
#比如在这里定义了INFO级别，只有等于及高于这个级别的才进行处理，则应用程序中所有DEBUG级别的日志信息将不被打印出来。
#ALL:打印所有的日志，OFF：关闭所有的日志输出。
#appenderName就是指定日志信息输出到哪个地方。可同时指定多个输出目的地。

#stdout为控制台输出
log4j.rootLogger = debug,stdout,debuger,errorer,warninger

#2.配置日志信息输出目的地 Appender
#Appender 负责控制日志记录操作的输出。其语法为：
#log4j.appender.appenderName = fully.qualified.name.of.appender.class
#log4j.appender.appenderName.option1 = value1
#…
#log4j.appender.appenderName.optionN = valueN
#这里的appenderName为在第一步里定义的，可任意起名。其中，Log4j提供的appender有以下几种：
#org.apache.log4j.ConsoleAppender（控制台），
#org.apache.log4j.FileAppender（文件），
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#    可通过log4j.appender.R.MaxFileSize=100KB设置文件大小，\
#    还可通过log4j.appender.R.MaxBackupIndex=1设置为保存一个备份文件。
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
#例如：log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#定义一个名为stdout的输出目的地，ConsoleAppender为控制台。

# [%p]输出的错误级别
# %d输出错误时间
# %c输出类名
# %m错误信息
# %n换行符

### 输出信息到控制抬 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender  
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.Threshold = INFO
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout  
log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d %m%n%n  

#3.配置日志信息的格式（布局）Layout
#Layout 负责格式化Appender的输出。其语法为：
#log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class
#log4j.appender.appenderName.layout.option1 = value1
#…
#log4j.appender.appenderName.layout.optionN = valueN
#其中，Log4j提供的layout有以下几种：
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#关于格式化日志
#Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，打印参数如下：
#%m 输出代码中指定的消息；
#%M 输出打印该条日志的方法名；
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL；
#%r 输出自应用启动到输出该log信息耗费的毫秒数；
#%c 输出所属的类目，通常就是所在类的全名；
#%t 输出产生该日志事件的线程名；
#%n 输出一个回车换行符，Windows平台为"rn”，Unix平台为"n”；
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，\
#    比如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2015-12-14 16:25:55,921；
#%l 输出日志事件的发生位置，及在代码中的行数。

### 输出DEBUG 级别以上的日志到文件C:\logj4 ###
log4j.appender.debuger = org.apache.log4j.DailyRollingFileAppender
log4j.appender.debuger.File = ${agentsystem.root}/debug.log
log4j.appender.debuger.Append = true  
log4j.appender.debuger.Threshold = DEBUG  
log4j.appender.debuger.layout = org.apache.log4j.PatternLayout  
log4j.appender.debuger.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n  

### 输出ERROR 级别以上的日志到文件C:\logj4\error ###
log4j.appender.errorer = org.apache.log4j.FileAppender  
log4j.appender.errorer.File = ${agentsystem.root}/error.log  
log4j.appender.errorer.Append = true  
log4j.appender.errorer.Threshold = ERROR  
log4j.appender.errorer.layout = org.apache.log4j.PatternLayout  
log4j.appender.errorer.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n  

### 输出WARN 级别以上的日志到文件C:\logj4\warn ###
log4j.appender.warninger = org.apache.log4j.FileAppender  
log4j.appender.warninger.File = ${agentsystem.root}/warn.log  
log4j.appender.warninger.Append = true  
log4j.appender.warninger.Threshold = WARN  
log4j.appender.warninger.layout = org.apache.log4j.PatternLayout  
log4j.appender.warninger.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n 